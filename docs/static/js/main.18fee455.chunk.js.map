{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","cat","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","toUpperCase","images","fixed_height","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAC1BC,QAAQC,IAAIV,GAAc,SAAAW,GAAG,OAAGT,GAAH,mBAAiBS,QAC9CR,EAAc,MAKhB,SACE,uBACES,KAAK,OACLC,YAAY,eACZC,MAAOZ,EACPa,SAlBmB,SAACV,GACxBF,EAAcE,EAAEW,OAAOF,a,+BCPZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGfC,EAHe,iDAGkCC,UAAUH,GAH5C,+DAKEI,MAAMF,GALR,cAKfG,EALe,gBAMEA,EAASC,OANX,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAE3B,OADAnB,QAAQC,IAAI,WAAWkB,GAChB,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAAMC,cACjBX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,aAAab,QAbb,kBAiBdM,GAjBc,4CAAH,sDCCTQ,EAAc,SAAC,GAAqB,IAApBL,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAErC,OADAX,QAAQC,IAAImB,EAAIC,EAAMV,GAEpB,sBAAKe,UAAU,2DAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCHGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAExB,ECH0B,SAACA,GAE3B,MAA0BjB,mBAAS,CACjCwB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OAPAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAAAC,GACrBH,EAAS,CAAEhB,KAAMmB,EAAML,SAAS,SAGjC,CAACrB,IAEGsB,EDXwBK,CAAa3B,GAAhCc,EAAZ,EAAOP,KAAac,EAApB,EAAoBA,QAEpB,OACE,qCACGA,GAAW,mBAAGJ,UAAU,qDAAb,wBACZ,oBAAIA,UAAU,sDAAd,SAAqEjB,IACrE,qBAAKiB,UAAU,YAAf,SACGH,EAAOL,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEXRiB,EAAS,WAEpB,MAAoC7C,mBAAS,CAAC,SAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAIA,OAAO,qCACL,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG+C,EAAWpB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CACAA,SAAUA,EAASa,eACdb,Y,MCdb8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.18fee455.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputValue = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length>2){\n      console.log(setCategories(cat=>[inputValue,...cat]))\n      setInputValue('')\n    }\n\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        placeholder='Add Category'\n        value={inputValue}\n        onChange={handleInputValue}\n      ></input>\n    </form>\n  )\n}\n\nAddCategory.propTypes= {\n  setCategories: PropTypes.func.isRequired\n}\n","\n  export const getGifs = async (category) => {\n\n    //encodeUri reemplaza los espacios por %20\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=12&api_key=P4tTcP5cVyoU0AepV7bE7hx8z8s1oyMu`\n\n    const response = await fetch(url)\n    const { data } = await response.json()\n\n    const gifs = data.map(img => {\n      console.log('--------',img)\n      return {\n        id: img.id,\n        title: img.title.toUpperCase(),\n        url: img.images?.fixed_height.url\n      }\n    })\n\n    return gifs\n  }","import React from 'react'\n\nexport const GifGridItem = ({id, title,url}) => {\n  console.log(id, title,url)\n  return (\n    <div className='card animate__animated animate__fadeIn animate__delay-2s'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport {useFetchGifs} from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\n  const {data:images, loading} = useFetchGifs(category)\n\n  return (\n    <>\n      {loading && <p className=\"animate__animated animate__flash animate__delay-2s\">Loading...</p>}\n      <h3 className=\"animate__animated animate__fadeIn animate__delay-2s\">{category}</h3>\n      <div className='card-grid'>\n        {images.map((img) =>\n          <GifGridItem\n            key={img.id}\n            {...img} />//...img mandamos cada imagen con sus propiedades \n        )}\n\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({ data: imgs, loading: false });\n    })\n\n  }, [category])\n\n  return state //devuelve loading tru, data []\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifApp = () => {\n\n  const [categories, setCategories] = useState(['cats'])\n\n  //console.log(categories)\n\n  return <>\n    <h2>Giphy App</h2>\n    <AddCategory setCategories={setCategories} />\n    <hr />\n    {/* <button onClick={handleAdd}>Agregar</button> */}\n    <ol>\n      {categories.map(category =>\n        <GifGrid \n        category={category.toUpperCase()} \n        key={category} />\n        )}\n    </ol>\n\n\n  </>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifApp} from './GifApp'\nimport './index.css';\n\nReactDOM.render(\n    <GifApp/>,\n  document.getElementById('root')\n);\n\n//componente\n\n\n"],"sourceRoot":""}